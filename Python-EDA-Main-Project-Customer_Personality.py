# -*- coding: utf-8 -*-
"""EDA Main project 11 Customer Personality Analysis  Completed .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JuCFAv-ZOZUMEkaIK0GKO3kOdckzHy_u

#EDA important steps:-
#1 : - Define the Question .
#2 : - Collect the data.
#3 : - Clean the data .
#4 : - Analyze the data .
#5 : - Visualize and Finding.
#Import all important Libraries.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
plt.style.use('dark_background')
import warnings
warnings.filterwarnings('ignore')
from datetime import datetime
sns.set(color_codes=True)

"""#Customer Personality Analysis
#Analysis of company's ideal customers

# Dataset Link :- https://www.kaggle.com/datasets/imakash3011/customer-personality-analysis

#Problem Statement

#Customer Personality Analysis is a detailed analysis of a company’s ideal customers. It helps a business to better understand its customers and makes it easier for them to modify products according to the specific needs, behaviors and concerns of different types of customers.

#Customer personality analysis helps a business to modify its product based on its target customers from different types of customer segments. For example, instead of spending money to market a new product to every customer in the company’s database, a company can analyze which customer segment is most likely to buy the product and then market the product only on that particular segment.
"""

df=pd.read_csv("/content/drive/MyDrive/EDA Main Project files/customer personality.csv")
df.head(2)

"""# Check the shape."""

df.shape

"""# Check info."""

df.info()

"""# Drop Irrelevant columns."""

df.columns

df['Response'].unique()

df.drop(['ID','AcceptedCmp3','AcceptedCmp4','AcceptedCmp5','AcceptedCmp1','AcceptedCmp2','Z_CostContact','Z_Revenue','Response','NumDealsPurchases', 'NumWebPurchases',
       'NumCatalogPurchases', 'NumStorePurchases'],axis=1,inplace=True)

df.head(2)

"""# Change the datatype in Dt_customer."""

df['Dt_Customer'].dtype

df['Dt_Customer'] = pd.to_datetime(df['Dt_Customer'])
df['Dt_Customer']

df['Dt_Customer'].dtype

"""# Check Statstical."""

df.describe()

"""# Check null values."""

df.isnull().sum()

percent_missing_values = df.isnull().sum() * 100 / len(df)
percent_missing_values

percent_missing_values.plot(kind='barh')
plt.show()

"""# Fill null values with mean , median and mode respectively,"""

for i in df.columns:
  if df[i].dtypes=='object':
    df[i]=df[i].fillna(df[i].mode()[0])
  else:
    df[i]=df[i]=df[i].fillna(df[i].median())

df.isnull().sum()

"""# Analyize the data and finding ?"""

df.head(2)

df.columns

"""# Find the number of custumer birth year ?"""

df.Year_Birth.value_counts()

plt.figure(figsize=(35,30))
gr=sns.countplot(x='Year_Birth',data=df)
gr.bar_label(gr.containers[0])
plt.show()

df.columns

"""# Find out the customer education  ?"""

e=df['Education'].value_counts()
e

e.plot(kind="pie",autopct="%1.2f%%")

plt.show()

plt.figure(figsize=(12,9))
gr=sns.countplot(x='Education',data=df)
gr.bar_label(gr.containers[0])
plt.show()

df.columns

"""# Check the marital Status of the customers ?"""

ms=df['Marital_Status'].value_counts()
ms

plt.figure(figsize=(12,9))
gr=sns.countplot(x='Marital_Status',data=df)
gr.bar_label(gr.containers[0])
plt.show()

plt.figure(figsize=(15,9))
ms.plot(kind="pie",autopct="%1.2f%%")

plt.show()

df.columns

"""# Find the mean , max and minimum income of the customers ?"""

df['Income'].mean()

df['Income'].max()

df['Income'].min()

df.columns

"""# Find the number of kidhome and their percentage  ?"""

kd=df['Kidhome'].value_counts()
kd

plt.figure(figsize=(15,9))
kd.plot(kind="pie",autopct="%1.2f%%")

plt.show()

plt.figure(figsize=(12,9))
gr=sns.countplot(x='Kidhome',data=df)
gr.bar_label(gr.containers[0])
plt.show()

df.columns

"""# Find the number of teen and their percentage ?"""

th=df['Teenhome'].value_counts()
th

plt.figure(figsize=(12,9))
gr=sns.countplot(x='Teenhome',data=df)
gr.bar_label(gr.containers[0])
plt.show()

plt.figure(figsize=(15,9))
th.plot(kind="pie",autopct="%1.2f%%")

plt.show()

df.columns

"""# Extract the month and year in Dt_Customer columns ?"""

df['Dt_Customer']

dc=df['Dt_Customer'].dt.year.value_counts()
dc

plt.figure(figsize=(12,9))
dc.plot(kind="pie",autopct="%1.2f%%")

plt.show()

dc1=df['Dt_Customer'].dt.month.value_counts()
dc1

plt.figure(figsize=(15,9))
dc1.plot(kind="pie",autopct="%1.2f%%")

plt.show()

df.columns

"""# Recency
#Number of days since customer's last purchase

# Find the mean , max and median ?
"""

df['Recency']

df['Recency'].max()

df['Recency'].min()

df['Recency'].mean()

df.columns

"""# Find the mean , max and minimun amount spend on wine ?"""

df['MntWines']

df['MntWines'].mean()

df['MntWines'].max()

df['MntWines'].min()

df.columns

"""# Find the max , min and mean amount spend on  Fruits ?"""

df['MntFruits'].mean()

df['MntFruits'].max()

df['MntFruits'].min()

df.columns

"""# Find the mean , max and min amount spend on meat products ?"""

df['MntMeatProducts'].mean()

df['MntMeatProducts'].max()

df['MntMeatProducts'].min()

df.columns

"""# Find the mean , max and min amount spend on Fish products ?"""

df['MntFishProducts'].mean()

df['MntFishProducts'].max()

df['MntFishProducts'].min()

df.columns

df['MntSweetProducts'].mean()

df['MntSweetProducts'].max()

df['MntSweetProducts'].min()

df.columns

"""# Find the mean , max and min amount spend on gold products ?"""

df['MntGoldProds'].mean()

df['MntGoldProds'].min()

df['MntGoldProds'].max()

df.columns

"""# Find the max, min and mean of number web visits."""

df['NumWebVisitsMonth']

df['NumWebVisitsMonth'].mean()

df['NumWebVisitsMonth'].max()

df['NumWebVisitsMonth'].min()

df.columns

df['Complain']

com=df['Complain'].value_counts()
com

plt.figure(figsize=(15,9))
com.plot(kind="pie",autopct="%1.2f%%")

plt.show()

df.head(2)

"""# Find the number of marital status is single , income is more than 4000 and they spend amount maximum on wines ?"""

df[(df['Marital_Status']=='Single')&(df['Income']>=4000)&(df['MntWines'].max())]

len(df[(df['Marital_Status']=='Single')&(df['Income']>=4000)&(df['MntWines'].max())])

df[(df['Marital_Status']=='Single')&(df['Income']>=4000)&(df['MntWines'].max())].count()[0]

df.head(2)

"""# Find out the number the custmer age is greater than 1970 and marital status and is married and they spend amount on fruits ?"""

df[(df['Year_Birth']>=1970)&(df['Marital_Status']=='Married')&(df['MntFruits'].max())]

len(df[(df['Year_Birth']>=1970)&(df['Marital_Status']=='Married')&(df['MntFruits'].max())])

df[(df['Year_Birth']>=1970)&(df['Marital_Status']=='Married')&(df['MntFruits'].max())].count()[0]

